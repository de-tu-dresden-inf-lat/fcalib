{"name":"FCAlib","tagline":"FCA library","body":"# FCAlib\r\n*A library for algorithms in Formal Concept Analysis*\r\n\r\n[![Build Status](https://travis-ci.org/julianmendez/fcalib.png?branch=master)](https://travis-ci.org/julianmendez/fcalib)\r\n\r\n\r\n## Overview\r\n\r\n**FCAlib** is an open-source, extensible library for Formal Concept Analysis (FCA) tool developers that includes the FCAAPI. It provides basic functionalities that are needed for building an FCA tool. It supports incomplete contexts and includes efficient implementations of basic FCA algorithms like implicational closure, next-closed set, etc. It implements the attribute exploration algorithm in such a way that it can be used together with a custom implemented expert that supports FCAAPI. \r\n\r\nFCAlib is extended by [OntoComPlib](http://julianmendez.github.io/ontocomplib/) for using attribute exploration together with OWL ontologies. The following code segment shows how to create a formal context, add attributes to it, create an expert for this context, and start attribute exploration:\r\n\r\n```java\r\n  // Create a formal context whose attributes are of type String, and whose objects have\r\n  // identifiers of type String\r\n  FormalContext<String,String> context = new FormalContext<String,String>();\r\n  \r\n  // Create an expert for this context\r\n  MyExpertClass<String> expert = new MyExpertClass<String>(context);\r\n        \r\n  // Add attributes to this context\r\n  context.addAttribute(\"a\");\r\n  context.addAttribute(\"b\");\r\n  context.addAttribute(\"c\");\r\n        \r\n  // Set expert for this context\r\n  context.setExpert(expert);\r\n  // Context listens to the actions of the expert\r\n  expert.addExpertActionListener(context);\r\n        \r\n  // Create an expert action for starting attribute exploration           \r\n  StartExplorationAction<String,String,FullObject<String,String>> action = \r\n          new StartExplorationAction<String,String,FullObject<String,String>>();\r\n  action.setContext(context);\r\n  // Fire the action, exploration starts...\r\n  expert.fireExpertAction(action);\r\n```\r\n\r\nThe following code segment shows how to create a set of implications for the\r\nabove context, add implications to it, and compute next-closure:\r\n\r\n```java\r\n  // Create a set of implications for the above context. Attributes are of type String\r\n  ImplicationSet<String> = new ImplicationSet<String>(context);\r\n          \r\n  // Create a new implication with empty premise and conclusion\r\n  Implication<String> imp = new Implication<String>();\r\n          \r\n  // Add attribute \"a\" to the premise\r\n  imp.getPremise().add(\"a\");\r\n          \r\n  // Add attribute \"b\" to the conclusion\r\n  imp.getConclusion().add(\"b\");\r\n          \r\n  // Add this implication to the implication set\r\n  implications.add(imp);\r\n          \r\n  // Compute the next-closed set after mySet, and update mySet\r\n  mySet = implications.nextClosure(mySet);\r\n```\r\n\r\n\r\n## License\r\n\r\n[GNU GPL v3](http://www.gnu.org/licenses/gpl-3.0.txt)\r\n\r\n\r\n## Developers\r\n\r\nOriginal Developer: [Barış Sertkaya](https://sites.google.com/site/sertkayabaris/)\r\n\r\nAdditional Developers: [Julian Mendez](http://github.com/julianmendez), [Francesco Kriegel](http://github.com/francesco-kriegel), [Daniel Borchmann](http://github.com/exot)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}